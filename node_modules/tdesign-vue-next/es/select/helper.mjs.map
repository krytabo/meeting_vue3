{"version":3,"file":"helper.mjs","sources":["../../src/select/helper.ts"],"sourcesContent":["import { InjectionKey, ComputedRef, Slots } from 'vue';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { TdSelectProps, TdOptionProps, SelectValue, SelectOption, SelectOptionGroup } from './type';\n\nexport const selectInjectKey: InjectionKey<\n  ComputedRef<{\n    hoverIndex: number;\n    selectValue: TdSelectProps['value'];\n    size: TdSelectProps['size'];\n    max: TdSelectProps['max'];\n    reserveKeyword: TdSelectProps['reserveKeyword'];\n    multiple: TdSelectProps['multiple'];\n    handleValueChange: TdSelectProps['onChange'];\n    handleCreate: TdSelectProps['onCreate'];\n    handlerInputChange: TdSelectProps['onInputChange'];\n    handlePopupVisibleChange: TdSelectProps['onPopupVisibleChange'];\n    popupContentRef: ComputedRef<HTMLElement>;\n    indeterminate: boolean;\n    isCheckAll: boolean;\n    onCheckAllChange: (checked: boolean) => void;\n    getSelectedOptions: (selectValue?: SelectValue[] | SelectValue) => TdOptionProps[];\n  }>\n> = Symbol('selectProvide');\n\nexport const getSingleContent = (value: TdSelectProps['value'], options: SelectOption[]): string => {\n  for (const option of options) {\n    if ((option as TdOptionProps).value === value) {\n      return option?.label;\n    }\n  }\n  return value as string;\n};\n\nexport const getMultipleContent = (value: SelectValue[], options: SelectOption[]) => {\n  const res = [];\n  for (const iterator of value) {\n    const resLabel = getSingleContent(iterator, options);\n    if (resLabel) {\n      res.push(resLabel);\n    }\n  }\n  return res;\n};\n\nexport const getNewMultipleValue = (innerValue: SelectValue[], optionValue: SelectValue) => {\n  const value = cloneDeep(innerValue) as SelectValue[];\n  const valueIndex = value.indexOf(optionValue);\n  if (valueIndex < 0) {\n    value.push(optionValue);\n  } else {\n    value.splice(valueIndex, 1);\n  }\n  return {\n    value,\n    isCheck: valueIndex < 0,\n  };\n};\n"],"names":["selectInjectKey","Symbol","getSingleContent","value","options","option","label","getMultipleContent","res","iterator","resLabel","push","getNewMultipleValue","innerValue","optionValue","cloneDeep","valueIndex","indexOf","splice","isCheck"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAIaA,eAAA,GAkBTC,OAAO,eAAe,EAAA;AAEb,IAAAC,gBAAA,GAAmB,SAAnBA,gBAAA,CAAoBC,KAAA,EAA+BC,OAAoC,EAAA;AAAA,EAAA,IAAA,SAAA,GAAA,0BAAA,CAC7EA,OAAS,CAAA;AAAA,IAAA,KAAA,CAAA;AAAA,EAAA,IAAA;IAA9B,KAA8B,SAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,KAAA,GAAA,SAAA,CAAA,CAAA,EAAA,EAAA,IAAA,GAAA;AAAA,MAAA,IAAnBC;AACJ,MAAA,IAAAA,MAAA,CAAyBF,UAAUA,KAAO,EAAA;AAC7C,QAAA,OAAOE,MAAQ,KAARA,IAAAA,IAAAA,MAAQ,KAARA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,MAAQ,CAAAC,KAAA,CAAA;AACjB,OAAA;AACF,KAAA;AAAA,GAAA,CAAA,OAAA,GAAA,EAAA;AAAA,IAAA,SAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA;AAAA,GAAA,SAAA;AAAA,IAAA,SAAA,CAAA,CAAA,EAAA,CAAA;AAAA,GAAA;AACO,EAAA,OAAAH,KAAA,CAAA;AACT,EAAA;AAEa,IAAAI,kBAAA,GAAqB,SAArBA,kBAAA,CAAsBJ,KAAA,EAAsBC,OAA4B,EAAA;EACnF,IAAMI,MAAM,EAAC,CAAA;AAAA,EAAA,IAAA,UAAA,GAAA,0BAAA,CACUL,KAAO,CAAA;AAAA,IAAA,MAAA,CAAA;AAAA,EAAA,IAAA;IAA9B,KAA8B,UAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,MAAA,GAAA,UAAA,CAAA,CAAA,EAAA,EAAA,IAAA,GAAA;AAAA,MAAA,IAAnBM;AACH,MAAA,IAAAC,QAAA,GAAWR,gBAAiB,CAAAO,QAAA,EAAUL,OAAO,CAAA,CAAA;AACnD,MAAA,IAAIM,QAAU,EAAA;AACZF,QAAAA,GAAA,CAAIG,KAAKD,QAAQ,CAAA,CAAA;AACnB,OAAA;AACF,KAAA;AAAA,GAAA,CAAA,OAAA,GAAA,EAAA;AAAA,IAAA,UAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA;AAAA,GAAA,SAAA;AAAA,IAAA,UAAA,CAAA,CAAA,EAAA,CAAA;AAAA,GAAA;AACO,EAAA,OAAAF,GAAA,CAAA;AACT,EAAA;AAEa,IAAAI,mBAAA,GAAsB,SAAtBA,mBAAA,CAAuBC,UAAA,EAA2BC,WAA6B,EAAA;AACpF,EAAA,IAAAX,KAAA,GAAQY,YAAUF,UAAU,CAAA,CAAA;AAC5B,EAAA,IAAAG,UAAA,GAAab,KAAM,CAAAc,OAAA,CAAQH,WAAW,CAAA,CAAA;EAC5C,IAAIE,aAAa,CAAG,EAAA;AAClBb,IAAAA,KAAA,CAAMQ,KAAKG,WAAW,CAAA,CAAA;AACxB,GAAO,MAAA;AACCX,IAAAA,KAAA,CAAAe,MAAA,CAAOF,YAAY,CAAC,CAAA,CAAA;AAC5B,GAAA;EACO,OAAA;AACLb,IAAAA,KAAA,EAAAA,KAAA;IACAgB,SAASH,UAAa,GAAA,CAAA;GACxB,CAAA;AACF;;;;"}