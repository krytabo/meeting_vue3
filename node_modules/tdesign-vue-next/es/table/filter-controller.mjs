/**
 * tdesign v0.24.2
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _typeof } from '../_chunks/dep-21468dc9.mjs';
import { _ as _defineProperty } from '../_chunks/dep-3cecb2d2.mjs';
import { defineComponent, ref, h, createVNode, mergeProps } from 'vue';
import { FilterIcon } from 'tdesign-icons-vue-next';
import { i as isEmpty_1 } from '../_chunks/dep-f8038a0a.mjs';
import { Popup } from '../popup/index.mjs';
import { CheckboxGroup } from '../checkbox/index.mjs';
import { RadioGroup } from '../radio/index.mjs';
import { Input } from '../input/index.mjs';
import { Button } from '../button/index.mjs';
import { useTNodeDefault } from '../hooks/tnode.mjs';
import '../hooks/useConfig.mjs';
import { useGlobalIcon } from '../hooks/useGlobalIcon.mjs';
import { useConfig } from '../config-provider/useConfig.mjs';
import '../_chunks/dep-ad7eea53.mjs';
import '../_chunks/dep-dcaa2bc6.mjs';
import '../_chunks/dep-1984c62f.mjs';
import '../_chunks/dep-f5995493.mjs';
import '../_chunks/dep-cd44ef02.mjs';
import '../_chunks/dep-63f67da3.mjs';
import '../_chunks/dep-a537ee3e.mjs';
import '../_chunks/dep-8c2e57f5.mjs';
import '../_chunks/dep-c5944b2d.mjs';
import '../_chunks/dep-a39da6ce.mjs';
import '../_chunks/dep-f5b976b2.mjs';
import '../_chunks/dep-6ad4a916.mjs';
import '../_chunks/dep-de110986.mjs';
import '../_chunks/dep-e478235e.mjs';
import '../popup/popup.mjs';
import '../_chunks/dep-fc49c640.mjs';
import '../_chunks/dep-33031998.mjs';
import '@popperjs/core';
import '../utils/dom.mjs';
import '../_chunks/dep-0cf2dc82.mjs';
import '../utils/easing.mjs';
import '../utils/render-tnode.mjs';
import '../_chunks/dep-2517604a.mjs';
import '../_chunks/dep-22081ace.mjs';
import '../_chunks/dep-eede90e8.mjs';
import '../_chunks/dep-7b441284.mjs';
import '../_chunks/dep-13628992.mjs';
import '../_chunks/dep-0510ab65.mjs';
import '../_chunks/dep-2022ae69.mjs';
import '../_chunks/dep-71ce186a.mjs';
import '../_common/js/utils/set-style.mjs';
import '../popup/props.mjs';
import '../popup/container.mjs';
import '../_chunks/dep-cbaabd8b.mjs';
import '../hooks/useVModel.mjs';
import '../_chunks/dep-a953bb61.mjs';
import '../_chunks/dep-b43427a8.mjs';
import '../_chunks/dep-cab779bd.mjs';
import '../_chunks/dep-d904f554.mjs';
import '../_chunks/dep-a6ebc045.mjs';
import '../_chunks/dep-6f8d8885.mjs';
import '../_chunks/dep-2e0d3d32.mjs';
import '../_chunks/dep-a8f3adf1.mjs';
import '../_chunks/dep-c692ab23.mjs';
import '../_chunks/dep-e23bac6d.mjs';
import '../_chunks/dep-6d55d809.mjs';
import '../_common/js/global-config/default-config.mjs';
import '../_common/js/global-config/locale/zh_CN.mjs';
import '../config-provider/type.mjs';
import '../utils/withInstall.mjs';
import './style/css.mjs';
import '../popup/type.mjs';
import '../checkbox/checkbox.mjs';
import '../checkbox/props.mjs';
import '../form/hooks.mjs';
import '../hooks/useRipple.mjs';
import '../hooks/useKeepAnimation.mjs';
import '../utils/set-style.mjs';
import '../checkbox/constants.mjs';
import '../checkbox/group.mjs';
import '../_chunks/dep-9488bcf1.mjs';
import '../_chunks/dep-09ac8451.mjs';
import '../checkbox/checkbox-group-props.mjs';
import '../hooks/slot.mjs';
import '../checkbox/type.mjs';
import '../radio/radio.mjs';
import '../utils/helper.mjs';
import '../_chunks/dep-d52a3086.mjs';
import '../radio/props.mjs';
import '../radio/constants.mjs';
import '../radio/group.mjs';
import '../_chunks/dep-bc2a46e2.mjs';
import '../_chunks/dep-114a2907.mjs';
import '../_chunks/dep-a64ddefd.mjs';
import '../radio/radio-group-props.mjs';
import '../radio/radio-button.mjs';
import '../radio/type.mjs';
import '../input/input.mjs';
import '../input/props.mjs';
import '../input/useInput.mjs';
import '../form/const.mjs';
import '../hooks/index.mjs';
import '../hooks/icon.mjs';
import '../hooks/useCommonClassName.mjs';
import '../hooks/useDefaultValue.mjs';
import '../hooks/useDestroyOnClose.mjs';
import '../hooks/useVirtualScroll.mjs';
import '../input/useInputEventHandler.mjs';
import '../input/useInputWidth.mjs';
import '../input/input-group.mjs';
import '../input/type.mjs';
import '../button/button.mjs';
import '../loading/index.mjs';
import '../loading/directive.mjs';
import '../loading/plugin.mjs';
import '../loading/loading.mjs';
import '../loading/icon/gradient.mjs';
import '../_common/js/loading/circle-adapter.mjs';
import '../_common/js/utils/helper.mjs';
import '../utils/transfer-dom.mjs';
import '../loading/props.mjs';
import '../loading/type.mjs';
import '../button/props.mjs';
import '../button/type.mjs';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var TableFilterController = defineComponent({
  name: "TableFilterController",
  props: {
    column: Object,
    tFilterValue: Object,
    innerFilterValue: Object,
    tableFilterClasses: Object,
    isFocusClass: String,
    primaryTableElement: {},
    onVisibleChange: Function
  },
  emits: ["inner-filter-change", "reset", "confirm"],
  setup: function setup(props) {
    var triggerElementRef = ref(null);
    var renderTNode = useTNodeDefault();
    var _useConfig = useConfig("table"),
      t = _useConfig.t,
      globalConfig = _useConfig.globalConfig;
    var _useGlobalIcon = useGlobalIcon({
        FilterIcon: FilterIcon
      }),
      FilterIcon$1 = _useGlobalIcon.FilterIcon;
    var filterPopupVisible = ref(false);
    var onFilterPopupVisibleChange = function onFilterPopupVisibleChange(visible) {
      var _props$onVisibleChang;
      filterPopupVisible.value = visible;
      (_props$onVisibleChang = props.onVisibleChange) === null || _props$onVisibleChang === void 0 ? void 0 : _props$onVisibleChang.call(props, visible);
    };
    return {
      t: t,
      globalConfig: globalConfig,
      FilterIcon: FilterIcon$1,
      filterPopupVisible: filterPopupVisible,
      triggerElementRef: triggerElementRef,
      renderTNode: renderTNode,
      onFilterPopupVisibleChange: onFilterPopupVisibleChange
    };
  },
  render: function render() {
    var _this = this,
      _this$tFilterValue;
    var getFilterContent = function getFilterContent(column2) {
      var _column2$filter, _column2$filter2, _this$innerFilterValu;
      var types = ["single", "multiple", "input"];
      if (column2.type && !types.includes(column2.filter.type)) {
        console.error("TDesign Table Error: column.filter.type must be the following: ".concat(JSON.stringify(types)));
        return;
      }
      var component = {
        single: RadioGroup,
        multiple: CheckboxGroup,
        input: Input
      }[column2.filter.type] || column2.filter.component;
      if (!component && !column2.filter.component) return;
      var filterComponentProps = _objectSpread(_objectSpread({
        options: ["single", "multiple"].includes(column2.filter.type) ? (_column2$filter = column2.filter) === null || _column2$filter === void 0 ? void 0 : _column2$filter.list : void 0
      }, ((_column2$filter2 = column2.filter) === null || _column2$filter2 === void 0 ? void 0 : _column2$filter2.props) || {}), {}, {
        value: (_this$innerFilterValu = _this.innerFilterValue) === null || _this$innerFilterValu === void 0 ? void 0 : _this$innerFilterValu[column2.colKey],
        onChange: function onChange(val) {
          _this.$emit("inner-filter-change", val, column2);
        }
      });
      if (column2.filter.confirmEvents) {
        column2.filter.confirmEvents.forEach(function (event) {
          filterComponentProps[event] = function () {
            _this.$emit("confirm", column2);
            _this.filterPopupVisible = false;
          };
        });
      }
      var renderComponent = function renderComponent() {
        var _this$innerFilterValu2;
        if (!component) return null;
        var isVueComponent = !!component.setup;
        if (typeof column2.filter.component === "function" && !isVueComponent) {
          return column2.filter.component(function (v, b) {
            var tProps = _typeof(b) === "object" && "attrs" in b ? b.attrs : {};
            return h(v, {
              props: _objectSpread(_objectSpread({}, filterComponentProps), tProps)
            });
          });
        }
        return createVNode(component, mergeProps({
          "value": (_this$innerFilterValu2 = _this.innerFilterValue) === null || _this$innerFilterValu2 === void 0 ? void 0 : _this$innerFilterValu2[column2.colKey]
        }, filterComponentProps), null);
      };
      return createVNode("div", {
        "class": _this.tableFilterClasses.contentInner
      }, [renderComponent()]);
    };
    var getBottomButtons = function getBottomButtons(column2) {
      if (!column2.filter.showConfirmAndReset) return;
      return createVNode("div", {
        "class": _this.tableFilterClasses.bottomButtons
      }, [createVNode(Button, {
        "theme": "default",
        "size": "small",
        "onClick": function onClick() {
          _this.$emit("reset", column2);
          _this.filterPopupVisible = false;
        }
      }, {
        "default": function _default() {
          return [_this.globalConfig.resetText];
        }
      }), createVNode(Button, {
        "theme": "primary",
        "size": "small",
        "onClick": function onClick() {
          _this.$emit("confirm", column2);
          _this.filterPopupVisible = false;
        }
      }, {
        "default": function _default() {
          return [_this.globalConfig.confirmText];
        }
      })]);
    };
    var column = this.column;
    var FilterIcon = this.FilterIcon;
    if (!column.filter || column.filter && !Object.keys(column.filter).length) return null;
    var defaultFilterIcon = this.t(this.globalConfig.filterIcon) || createVNode(FilterIcon, null, null);
    var filterValue = (_this$tFilterValue = this.tFilterValue) === null || _this$tFilterValue === void 0 ? void 0 : _this$tFilterValue[column.colKey];
    var isObjectTrue = _typeof(filterValue) === "object" && !isEmpty_1(filterValue);
    var isValueTrue = filterValue && _typeof(filterValue) !== "object";
    return createVNode(Popup, {
      "attach": this.primaryTableElement ? function () {
        return _this.primaryTableElement;
      } : void 0,
      "visible": this.filterPopupVisible,
      "destroyOnClose": true,
      "trigger": "click",
      "placement": "bottom-right",
      "showArrow": true,
      "overlayClassName": this.tableFilterClasses.popup,
      "onVisibleChange": function onVisibleChange(val) {
        return _this.onFilterPopupVisibleChange(val);
      },
      "class": [this.tableFilterClasses.icon, _defineProperty({}, this.isFocusClass, isObjectTrue || isValueTrue)],
      "content": function content() {
        return createVNode("div", {
          "class": _this.tableFilterClasses.popupContent
        }, [getFilterContent(column), getBottomButtons(column)]);
      }
    }, {
      "default": function _default() {
        return [createVNode("div", {
          "ref": "triggerElementRef"
        }, [_this.renderTNode("filterIcon", defaultFilterIcon)])];
      }
    });
  }
});

export { TableFilterController as default };
//# sourceMappingURL=filter-controller.mjs.map
