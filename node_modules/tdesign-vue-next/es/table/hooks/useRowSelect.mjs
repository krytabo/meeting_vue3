/**
 * tdesign v0.24.2
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _toConsumableArray } from '../../_chunks/dep-cbaabd8b.mjs';
import { _ as _typeof } from '../../_chunks/dep-21468dc9.mjs';
import { _ as _defineProperty } from '../../_chunks/dep-3cecb2d2.mjs';
import { _ as _slicedToArray } from '../../_chunks/dep-fc49c640.mjs';
import { toRefs, ref, computed, watch, createVNode, mergeProps } from 'vue';
import { i as intersection_1 } from '../../_chunks/dep-9488bcf1.mjs';
import { g as get_1 } from '../../_chunks/dep-303f016f.mjs';
import { i as isFunction_1 } from '../../_chunks/dep-c5944b2d.mjs';
import useDefaultValue from '../../hooks/useDefaultValue.mjs';
import { isRowSelectedDisabled } from '../../_common/js/table/utils.mjs';
import { Checkbox } from '../../checkbox/index.mjs';
import { Radio } from '../../radio/index.mjs';
import '../../_common/js/log/index.mjs';
import log from '../../_common/js/log/log.mjs';
import '../../_chunks/dep-33031998.mjs';
import '../../_chunks/dep-ad7eea53.mjs';
import '../../_chunks/dep-22081ace.mjs';
import '../../_chunks/dep-f5995493.mjs';
import '../../_chunks/dep-de110986.mjs';
import '../../_chunks/dep-eede90e8.mjs';
import '../../_chunks/dep-63f67da3.mjs';
import '../../_chunks/dep-09ac8451.mjs';
import '../../_chunks/dep-cab779bd.mjs';
import '../../_chunks/dep-8c2e57f5.mjs';
import '../../_chunks/dep-f5b976b2.mjs';
import '../../_chunks/dep-a39da6ce.mjs';
import '../../_chunks/dep-d904f554.mjs';
import '../../_chunks/dep-a537ee3e.mjs';
import '../../_chunks/dep-a8f3adf1.mjs';
import '../../_chunks/dep-e478235e.mjs';
import '../../_chunks/dep-cd44ef02.mjs';
import '../../_chunks/dep-c692ab23.mjs';
import '../../_chunks/dep-6f8d8885.mjs';
import '../../_chunks/dep-86de30fa.mjs';
import '../../_chunks/dep-71ce186a.mjs';
import '../../_chunks/dep-2022ae69.mjs';
import '../../_chunks/dep-114a2907.mjs';
import '../../checkbox/checkbox.mjs';
import '../../checkbox/props.mjs';
import '../../hooks/useVModel.mjs';
import '../../form/hooks.mjs';
import '../../hooks/useRipple.mjs';
import '../../hooks/useKeepAnimation.mjs';
import '../../hooks/useConfig.mjs';
import '../../config-provider/useConfig.mjs';
import '../../_chunks/dep-a953bb61.mjs';
import '../../_chunks/dep-b43427a8.mjs';
import '../../_chunks/dep-1984c62f.mjs';
import '../../_chunks/dep-a6ebc045.mjs';
import '../../_chunks/dep-6ad4a916.mjs';
import '../../_chunks/dep-2e0d3d32.mjs';
import '../../_chunks/dep-e23bac6d.mjs';
import '../../_chunks/dep-6d55d809.mjs';
import '../../_common/js/global-config/default-config.mjs';
import '../../_common/js/global-config/locale/zh_CN.mjs';
import '../../config-provider/type.mjs';
import '../../utils/set-style.mjs';
import '../../hooks/tnode.mjs';
import '../../_chunks/dep-2517604a.mjs';
import '../../_chunks/dep-7b441284.mjs';
import '../../_chunks/dep-13628992.mjs';
import '../../_chunks/dep-0510ab65.mjs';
import '../../utils/render-tnode.mjs';
import '../../_chunks/dep-f8038a0a.mjs';
import '../../_chunks/dep-dcaa2bc6.mjs';
import '../../_chunks/dep-0cf2dc82.mjs';
import '../../checkbox/constants.mjs';
import '../../checkbox/group.mjs';
import '../../checkbox/checkbox-group-props.mjs';
import '../../hooks/slot.mjs';
import '../../utils/withInstall.mjs';
import './style/css.mjs';
import '../../checkbox/type.mjs';
import '../../radio/radio.mjs';
import '../../utils/helper.mjs';
import '../../_chunks/dep-d52a3086.mjs';
import '../../radio/props.mjs';
import '../../radio/constants.mjs';
import '../../radio/group.mjs';
import '../../_chunks/dep-bc2a46e2.mjs';
import '../../_chunks/dep-a64ddefd.mjs';
import '../../radio/radio-group-props.mjs';
import '../../radio/radio-button.mjs';
import '../../radio/type.mjs';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function useRowSelect(props, tableSelectedClasses) {
  var _toRefs = toRefs(props),
    selectedRowKeys = _toRefs.selectedRowKeys,
    columns = _toRefs.columns,
    data = _toRefs.data,
    rowKey = _toRefs.rowKey;
  var selectedRowClassNames = ref();
  var _useDefaultValue = useDefaultValue(selectedRowKeys, props.defaultSelectedRowKeys || [], props.onSelectChange, "selectedRowKeys"),
    _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
    tSelectedRowKeys = _useDefaultValue2[0],
    setTSelectedRowKeys = _useDefaultValue2[1];
  var selectedRowDataMap = ref( /* @__PURE__ */new Map());
  var selectColumn = computed(function () {
    return props.columns.find(function (_ref) {
      var type = _ref.type;
      return ["multiple", "single"].includes(type);
    });
  });
  var canSelectedRows = computed(function () {
    return data.value.filter(function (row, rowIndex) {
      return !isDisabled(row, rowIndex);
    });
  });
  var intersectionKeys = computed(function () {
    return intersection_1(tSelectedRowKeys.value, canSelectedRows.value.map(function (t) {
      return get_1(t, props.rowKey || "id");
    }));
  });
  watch([data, columns, tSelectedRowKeys, selectColumn, rowKey], function () {
    var _selectColumn$value;
    var disabledRowFunc = function disabledRowFunc(p) {
      return selectColumn.value.disabled(p) ? tableSelectedClasses.disabled : "";
    };
    var disabledRowClass = (_selectColumn$value = selectColumn.value) !== null && _selectColumn$value !== void 0 && _selectColumn$value.disabled ? disabledRowFunc : void 0;
    var selected = new Set(tSelectedRowKeys.value);
    var selectedRowClassFunc = function selectedRowClassFunc(_ref2) {
      var row = _ref2.row;
      var rowId = get_1(row, props.rowKey || "id");
      return selected.has(rowId) ? tableSelectedClasses.selected : "";
    };
    var selectedRowClass = selected.size ? selectedRowClassFunc : void 0;
    selectedRowClassNames.value = [disabledRowClass, selectedRowClass];
  }, {
    immediate: true
  });
  function isDisabled(row, rowIndex) {
    return isRowSelectedDisabled(selectColumn.value, row, rowIndex);
  }
  function getSelectedHeader() {
    return function () {
      var isIndeterminate = intersectionKeys.value.length > 0 && intersectionKeys.value.length < canSelectedRows.value.length;
      var isChecked = intersectionKeys.value.length !== 0 && canSelectedRows.value.length !== 0 && intersectionKeys.value.length === canSelectedRows.value.length;
      return createVNode(Checkbox, {
        "checked": isChecked,
        "indeterminate": isIndeterminate,
        "disabled": !canSelectedRows.value.length,
        "onChange": handleSelectAll
      }, null);
    };
  }
  function renderSelectCell(p) {
    var column = p.col,
      _p$row = p.row,
      row = _p$row === void 0 ? {} : _p$row,
      rowIndex = p.rowIndex;
    var checked = tSelectedRowKeys.value.includes(get_1(row, props.rowKey || "id"));
    var disabled = typeof column.disabled === "function" ? column.disabled({
      row: row,
      rowIndex: rowIndex
    }) : column.disabled;
    var checkProps = isFunction_1(column.checkProps) ? column.checkProps({
      row: row,
      rowIndex: rowIndex
    }) : column.checkProps;
    var selectBoxProps = _objectSpread(_objectSpread({
      checked: checked,
      disabled: disabled
    }, checkProps), {}, {
      onClick: function onClick(e) {
        if (_typeof(e) === "object" && "e" in e) {
          var _e$e;
          (_e$e = e.e) === null || _e$e === void 0 ? void 0 : _e$e.stopPropagation();
        } else {
          e === null || e === void 0 ? void 0 : e.stopPropagation();
        }
      },
      onChange: function onChange() {
        return handleSelectChange(row);
      }
    });
    if (column.type === "single") return createVNode(Radio, selectBoxProps, null);
    if (column.type === "multiple") {
      var _props$indeterminateS;
      var isIndeterminate = (_props$indeterminateS = props.indeterminateSelectedRowKeys) !== null && _props$indeterminateS !== void 0 && _props$indeterminateS.length ? props.indeterminateSelectedRowKeys.includes(get_1(row, props.rowKey)) : false;
      return createVNode(Checkbox, mergeProps({
        "indeterminate": isIndeterminate
      }, selectBoxProps), null);
    }
    return null;
  }
  function handleSelectChange() {
    var row = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var selectedRowKeys2 = _toConsumableArray(tSelectedRowKeys.value);
    var reRowKey = props.rowKey || "id";
    var id = get_1(row, reRowKey);
    var selectedRowIndex = selectedRowKeys2.indexOf(id);
    var isExisted = selectedRowIndex !== -1;
    if (selectColumn.value.type === "multiple") {
      isExisted ? selectedRowKeys2.splice(selectedRowIndex, 1) : selectedRowKeys2.push(id);
    } else if (selectColumn.value.type === "single") {
      selectedRowKeys2 = !isExisted ? [id] : [];
    } else {
      log.warn("Table", "`column.type` must be one of `multiple` and `single`");
      return;
    }
    setTSelectedRowKeys(selectedRowKeys2, {
      selectedRowData: selectedRowKeys2.map(function (t) {
        return selectedRowDataMap.value.get(t);
      }),
      currentRowKey: id,
      currentRowData: row,
      type: isExisted ? "uncheck" : "check"
    });
  }
  function handleSelectAll(checked) {
    var _selectedRowKeys$valu;
    var reRowKey = props.rowKey || "id";
    var canSelectedRowKeys = canSelectedRows.value.map(function (record) {
      return get_1(record, reRowKey);
    });
    var disabledSelectedRowKeys = ((_selectedRowKeys$valu = selectedRowKeys.value) === null || _selectedRowKeys$valu === void 0 ? void 0 : _selectedRowKeys$valu.filter(function (id) {
      return !canSelectedRowKeys.includes(id);
    })) || [];
    var allIds = checked ? [].concat(_toConsumableArray(disabledSelectedRowKeys), _toConsumableArray(canSelectedRowKeys)) : _toConsumableArray(disabledSelectedRowKeys);
    setTSelectedRowKeys(allIds, {
      selectedRowData: checked ? allIds.map(function (t) {
        return selectedRowDataMap.value.get(t);
      }) : [],
      type: checked ? "check" : "uncheck",
      currentRowKey: "CHECK_ALL_BOX"
    });
  }
  function formatToRowSelectColumn(col) {
    var isSelection = ["multiple", "single"].includes(col.type);
    if (!isSelection) return col;
    return _objectSpread(_objectSpread({}, col), {}, {
      width: col.width || 64,
      className: [tableSelectedClasses.checkCell, col.className],
      cell: function cell(_, p) {
        return renderSelectCell(p);
      },
      title: col.type === "multiple" ? getSelectedHeader() : col.title
    });
  }
  watch([data, rowKey], function (_ref3) {
    var _ref4 = _slicedToArray(_ref3, 2),
      data2 = _ref4[0],
      rowKey2 = _ref4[1];
    for (var i = 0, len = data2.length; i < len; i++) {
      selectedRowDataMap.value.set(get_1(data2[i], rowKey2 || "id"), data2[i]);
    }
  }, {
    immediate: true
  });
  return {
    selectedRowClassNames: selectedRowClassNames,
    formatToRowSelectColumn: formatToRowSelectColumn
  };
}

export { useRowSelect as default };
//# sourceMappingURL=useRowSelect.mjs.map
