/**
 * tdesign v0.24.2
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _typeof } from '../_chunks/dep-21468dc9.mjs';
import { _ as _defineProperty } from '../_chunks/dep-3cecb2d2.mjs';
import { isVNode, h, defineComponent, toRefs, ref, computed, reactive, onMounted, onBeforeUnmount, createVNode, mergeProps } from 'vue';
import { i as isFunction_1 } from '../_chunks/dep-c5944b2d.mjs';
import { u as upperFirst_1 } from '../_chunks/dep-7b441284.mjs';
import { i as isString_1 } from '../_chunks/dep-0cf2dc82.mjs';
import { p as pick_1 } from '../_chunks/dep-e3e7f0af.mjs';
import { g as get_1 } from '../_chunks/dep-303f016f.mjs';
import { formatRowAttributes, formatRowClassNames, formatClassNames } from './utils.mjs';
import { getRowFixedStyles, getColumnFixedStyles } from './hooks/useFixed.mjs';
import useClassName from './hooks/useClassName.mjs';
import TEllipsis from './ellipsis.mjs';
import baseTableProps from './base-table-props.mjs';
import useLazyLoad from './hooks/useLazyLoad.mjs';
import { getCellKey } from './hooks/useRowspanAndColspan.mjs';
import '../_chunks/dep-ad7eea53.mjs';
import '../_chunks/dep-f5995493.mjs';
import '../_chunks/dep-a39da6ce.mjs';
import '../_chunks/dep-13628992.mjs';
import '../_chunks/dep-0510ab65.mjs';
import '../_chunks/dep-22081ace.mjs';
import '../_chunks/dep-de110986.mjs';
import '../_chunks/dep-eede90e8.mjs';
import '../_chunks/dep-63f67da3.mjs';
import '../_chunks/dep-86de30fa.mjs';
import '../_chunks/dep-cab779bd.mjs';
import '../_chunks/dep-8c2e57f5.mjs';
import '../_chunks/dep-f5b976b2.mjs';
import '../_chunks/dep-d904f554.mjs';
import '../_chunks/dep-0fdea1fe.mjs';
import '../_chunks/dep-a6ebc045.mjs';
import '../_chunks/dep-6f8d8885.mjs';
import '../_chunks/dep-2e0d3d32.mjs';
import '../_chunks/dep-6ad4a916.mjs';
import '../_chunks/dep-cd44ef02.mjs';
import '../_chunks/dep-a7f196e9.mjs';
import '../_chunks/dep-5a93c66b.mjs';
import '../_chunks/dep-c692ab23.mjs';
import '../_chunks/dep-fc49c640.mjs';
import '../_chunks/dep-33031998.mjs';
import '../_chunks/dep-bd52eb06.mjs';
import '../_chunks/dep-41ea6045.mjs';
import '../_common/js/log/index.mjs';
import '../_common/js/log/log.mjs';
import '../_common/js/utils/getScrollbarWidth.mjs';
import '../_common/js/utils/helper.mjs';
import '../_chunks/dep-cbaabd8b.mjs';
import '../_chunks/dep-d52a3086.mjs';
import '../utils/dom.mjs';
import '../utils/easing.mjs';
import '../hooks/useConfig.mjs';
import '../config-provider/useConfig.mjs';
import '../_chunks/dep-a953bb61.mjs';
import '../_chunks/dep-b43427a8.mjs';
import '../_chunks/dep-1984c62f.mjs';
import '../_chunks/dep-a537ee3e.mjs';
import '../_chunks/dep-e478235e.mjs';
import '../_chunks/dep-a8f3adf1.mjs';
import '../_chunks/dep-e23bac6d.mjs';
import '../_chunks/dep-6d55d809.mjs';
import '../_common/js/global-config/default-config.mjs';
import '../_common/js/global-config/locale/zh_CN.mjs';
import '../config-provider/type.mjs';
import '../utils/render-tnode.mjs';
import '../_chunks/dep-f8038a0a.mjs';
import '../_chunks/dep-dcaa2bc6.mjs';
import '../_chunks/dep-2517604a.mjs';
import '../_chunks/dep-2022ae69.mjs';
import '../_chunks/dep-71ce186a.mjs';
import '../tooltip/index.mjs';
import '../tooltip/tooltip.mjs';
import '../tooltip/props.mjs';
import '../popup/props.mjs';
import '../popup/index.mjs';
import '../popup/popup.mjs';
import '@popperjs/core';
import '../_common/js/utils/set-style.mjs';
import '../popup/container.mjs';
import '../hooks/useVModel.mjs';
import '../utils/withInstall.mjs';
import './style/css.mjs';
import '../popup/type.mjs';
import '../hooks/tnode.mjs';
import '../tooltip/util.mjs';
import '../tooltip/type.mjs';
import '../_common/js/utils/observe.mjs';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !isVNode(s);
}
var TABLE_PROPS = ["rowKey", "rowClassName", "columns", "fixedRows", "footData", "rowAttributes", "rowspanAndColspan", "scroll", "cellEmptyContent", "onCellClick", "onRowClick", "onRowDblclick", "onRowMouseover", "onRowMousedown", "onRowMouseenter", "onRowMouseleave", "onRowMouseup"];
var ROW_LISTENERS = ["click", "dblclick", "mouseover", "mousedown", "mouseenter", "mouseleave", "mouseup"];
function renderCell(params, slots, extra) {
  var col = params.col,
    row = params.row,
    rowIndex = params.rowIndex;
  if (col.colKey === "serial-number") {
    return rowIndex + 1;
  }
  if (isFunction_1(col.cell)) {
    return col.cell(h, params);
  }
  if (slots[col.colKey]) {
    return slots[col.colKey](params);
  }
  if (isString_1(col.cell) && slots[col.cell]) {
    return slots[col.cell](params);
  }
  if (isFunction_1(col.render)) {
    return col.render(h, _objectSpread(_objectSpread({}, params), {}, {
      type: "cell"
    }));
  }
  var r = get_1(row, col.colKey);
  if (![void 0, "", null].includes(r)) return r;
  if (extra !== null && extra !== void 0 && extra.cellEmptyContent) {
    return isFunction_1(extra.cellEmptyContent) ? extra.cellEmptyContent(h, params) : extra.cellEmptyContent;
  }
  if (slots.cellEmptyContent) return slots.cellEmptyContent(params);
  return r;
}
var TrElement = defineComponent({
  name: "TR",
  props: _objectSpread(_objectSpread({
    row: Object,
    rowIndex: Number,
    dataLength: Number,
    ellipsisOverlayClassName: String,
    classPrefix: String,
    rowAndColFixedPosition: Map,
    skipSpansMap: Map
  }, pick_1(baseTableProps, TABLE_PROPS)), {}, {
    scrollType: String,
    rowHeight: Number,
    trs: Map,
    bufferSize: Number,
    isVirtual: Boolean,
    tableElm: {},
    tableContentElm: {}
  }),
  emits: ["row-mounted"],
  setup: function setup(props, context) {
    var _toRefs = toRefs(props),
      tableContentElm = _toRefs.tableContentElm;
    var trRef = ref(null);
    var _useClassName = useClassName(),
      tdEllipsisClass = _useClassName.tdEllipsisClass,
      tableBaseClass = _useClassName.tableBaseClass,
      tableColFixedClasses = _useClassName.tableColFixedClasses,
      tableRowFixedClasses = _useClassName.tableRowFixedClasses,
      tdAlignClasses = _useClassName.tdAlignClasses,
      tableDraggableClasses = _useClassName.tableDraggableClasses;
    var trStyles = computed(function () {
      return getRowFixedStyles(get_1(props.row, props.rowKey || "id"), props.rowIndex, props.dataLength, props.fixedRows, props.rowAndColFixedPosition, tableRowFixedClasses);
    });
    var trAttributes = computed(function () {
      return formatRowAttributes(props.rowAttributes, {
        row: props.row,
        rowIndex: props.rowIndex,
        type: "body"
      }) || {};
    });
    var classes = computed(function () {
      var _trStyles$value;
      var customClasses = formatRowClassNames(props.rowClassName, {
        row: props.row,
        rowIndex: props.rowIndex,
        type: "body"
      }, props.rowKey || "id");
      return [(_trStyles$value = trStyles.value) === null || _trStyles$value === void 0 ? void 0 : _trStyles$value.classes, customClasses].filter(function (v) {
        return v;
      });
    });
    var _useLazyLoad = useLazyLoad(tableContentElm, trRef, reactive(_objectSpread(_objectSpread({}, props.scroll), {}, {
        rowIndex: props.rowIndex
      }))),
      hasLazyLoadHolder = _useLazyLoad.hasLazyLoadHolder,
      tRowHeight = _useLazyLoad.tRowHeight;
    var getTrListeners = function getTrListeners(row, rowIndex) {
      var trListeners = {};
      ROW_LISTENERS.forEach(function (eventName) {
        trListeners["on".concat(upperFirst_1(eventName))] = function (e) {
          var _props;
          var p = {
            e: e,
            row: row,
            index: rowIndex
          };
          (_props = props["onRow".concat(upperFirst_1(eventName))]) === null || _props === void 0 ? void 0 : _props.call(props, p);
        };
      });
      return trListeners;
    };
    onMounted(function () {
      var scrollType = props.scrollType,
        isVirtual = props.isVirtual,
        rowData = props.row,
        trs = props.trs;
      if (scrollType === "virtual") {
        if (isVirtual) {
          var $index = rowData.$index;
          trs.set($index, trRef.value);
          context.emit("row-mounted");
        }
      }
    });
    onBeforeUnmount(function () {
      if (props.isVirtual) {
        var trs = props.trs,
          row = props.row;
        var $index = row.$index;
        trs["delete"]($index);
      }
    });
    return {
      trRef: trRef,
      tableColFixedClasses: tableColFixedClasses,
      tSlots: context.slots,
      tdEllipsisClass: tdEllipsisClass,
      tableBaseClass: tableBaseClass,
      tdAlignClasses: tdAlignClasses,
      tableDraggableClasses: tableDraggableClasses,
      trStyles: trStyles,
      classes: classes,
      trAttributes: trAttributes,
      tRowHeight: tRowHeight,
      hasLazyLoadHolder: hasLazyLoadHolder,
      getTrListeners: getTrListeners
    };
  },
  methods: {
    renderEllipsisCell: function renderEllipsisCell(cellParams, params) {
      var cellNode = params.cellNode;
      var col = cellParams.col;
      var content = isFunction_1(col.ellipsis) ? col.ellipsis(h, cellParams) : void 0;
      if (_typeof(col.ellipsis) === "object" && isFunction_1(col.ellipsis.content)) {
        content = col.ellipsis.content(h, cellParams);
      }
      var tooltipProps = {};
      if (_typeof(col.ellipsis) === "object") {
        tooltipProps = "props" in col.ellipsis ? col.ellipsis.props : col.ellipsis || void 0;
      }
      var tableElement = this.tableElm;
      return createVNode(TEllipsis, {
        "placement": "top",
        "attach": tableElement ? function () {
          return tableElement;
        } : void 0,
        "tooltipContent": content && function () {
          return content;
        },
        "tooltipProps": tooltipProps,
        "overlayClassName": this.ellipsisOverlayClassName,
        "classPrefix": this.classPrefix
      }, _isSlot(cellNode) ? cellNode : {
        "default": function _default() {
          return [cellNode];
        }
      });
    },
    renderTd: function renderTd(params, extra) {
      var _ref,
        _this = this;
      var col = params.col,
        colIndex = params.colIndex,
        rowIndex = params.rowIndex;
      var cellSpans = extra.cellSpans,
        dataLength = extra.dataLength,
        rowAndColFixedPosition = extra.rowAndColFixedPosition;
      var cellNode = renderCell(params, this.tSlots, {
        cellEmptyContent: extra.cellEmptyContent
      });
      var tdStyles = getColumnFixedStyles(col, colIndex, rowAndColFixedPosition, this.tableColFixedClasses);
      var customClasses = formatClassNames(col.className, _objectSpread(_objectSpread({}, params), {}, {
        type: "td"
      }));
      var classes = [tdStyles.classes, customClasses, (_ref = {}, _defineProperty(_ref, this.tdEllipsisClass, col.ellipsis), _defineProperty(_ref, this.tableBaseClass.tdLastRow, rowIndex + cellSpans.rowspan === dataLength), _defineProperty(_ref, this.tableBaseClass.tdFirstCol, colIndex === 0 && this.rowspanAndColspan), _defineProperty(_ref, this.tdAlignClasses[col.align], col.align && col.align !== "left"), _defineProperty(_ref, this.tableDraggableClasses.handle, col.colKey === "drag"), _ref)];
      var onClick = function onClick(e) {
        var _this$onCellClick;
        var p = _objectSpread(_objectSpread({}, params), {}, {
          e: e
        });
        (_this$onCellClick = _this.onCellClick) === null || _this$onCellClick === void 0 ? void 0 : _this$onCellClick.call(_this, p);
      };
      var normalAttrs = isFunction_1(col.attrs) ? col.attrs(_objectSpread(_objectSpread({}, params), {}, {
        type: "td"
      })) : col.attrs;
      var attrs = _objectSpread(_objectSpread({}, normalAttrs), cellSpans);
      return createVNode("td", mergeProps({
        "key": col.colKey || colIndex,
        "class": classes,
        "style": tdStyles.style
      }, attrs, {
        "onClick": onClick
      }), [col.ellipsis ? this.renderEllipsisCell(params, {
        cellNode: cellNode
      }) : cellNode]);
    }
  },
  render: function render() {
    var _this$columns,
      _this2 = this,
      _this$trStyles;
    var row = this.row,
      rowIndex = this.rowIndex,
      dataLength = this.dataLength,
      rowAndColFixedPosition = this.rowAndColFixedPosition;
    var columVNodeList = (_this$columns = this.columns) === null || _this$columns === void 0 ? void 0 : _this$columns.map(function (col, colIndex) {
      var cellSpans = {};
      var params = {
        row: row,
        col: col,
        rowIndex: rowIndex,
        colIndex: colIndex
      };
      var spanState = null;
      if (_this2.skipSpansMap.size) {
        var _spanState, _spanState2;
        var cellKey = getCellKey(row, _this2.rowKey, col.colKey, colIndex);
        spanState = _this2.skipSpansMap.get(cellKey) || {};
        ((_spanState = spanState) === null || _spanState === void 0 ? void 0 : _spanState.rowspan) > 1 && (cellSpans.rowspan = spanState.rowspan);
        ((_spanState2 = spanState) === null || _spanState2 === void 0 ? void 0 : _spanState2.colspan) > 1 && (cellSpans.colspan = spanState.colspan);
        if (spanState.skipped) return null;
      }
      return _this2.renderTd(params, {
        dataLength: dataLength,
        rowAndColFixedPosition: rowAndColFixedPosition,
        columnLength: _this2.columns.length,
        cellSpans: cellSpans,
        cellEmptyContent: _this2.cellEmptyContent
      });
    });
    return createVNode("tr", mergeProps({
      "ref": "trRef"
    }, this.trAttributes, {
      "style": (_this$trStyles = this.trStyles) === null || _this$trStyles === void 0 ? void 0 : _this$trStyles.style,
      "class": this.classes
    }, this.getTrListeners(row, rowIndex)), [this.hasLazyLoadHolder ? [createVNode("td", {
      "style": {
        height: "".concat(this.tRowHeight, "px"),
        border: "none"
      }
    }, null)] : columVNodeList]);
  }
});

export { ROW_LISTENERS, TABLE_PROPS, TrElement as default, renderCell };
//# sourceMappingURL=tr.mjs.map
