/**
 * tdesign v0.24.2
 * (c) 2022 tdesign
 * @license MIT
 */

import { u as upperFirst_1 } from '../../_chunks/dep-7b441284.mjs';
import { getNode } from '../util.mjs';
import '../../_chunks/dep-ad7eea53.mjs';
import '../../_chunks/dep-13628992.mjs';
import '../../_chunks/dep-0510ab65.mjs';
import '../../_chunks/dep-22081ace.mjs';
import '../../_chunks/dep-f5995493.mjs';
import '../../_chunks/dep-21468dc9.mjs';
import '../../_chunks/dep-de110986.mjs';
import '../../_chunks/dep-eede90e8.mjs';
import '../../_chunks/dep-63f67da3.mjs';
import '../../_chunks/dep-3cecb2d2.mjs';
import 'vue';
import '../../_chunks/dep-e3e7f0af.mjs';
import '../../_chunks/dep-86de30fa.mjs';
import '../../_chunks/dep-cab779bd.mjs';
import '../../_chunks/dep-8c2e57f5.mjs';
import '../../_chunks/dep-c5944b2d.mjs';
import '../../_chunks/dep-a39da6ce.mjs';
import '../../_chunks/dep-f5b976b2.mjs';
import '../../_chunks/dep-d904f554.mjs';
import '../../_chunks/dep-0fdea1fe.mjs';
import '../../_chunks/dep-a6ebc045.mjs';
import '../../_chunks/dep-6f8d8885.mjs';
import '../../_chunks/dep-2e0d3d32.mjs';
import '../../_chunks/dep-6ad4a916.mjs';
import '../../_chunks/dep-cd44ef02.mjs';
import '../../_chunks/dep-a7f196e9.mjs';
import '../../_chunks/dep-5a93c66b.mjs';
import '../../_chunks/dep-c692ab23.mjs';

function useExposeFunc(treeStore, expose) {
  var setItem = function setItem(value, options) {
    var node = treeStore.value.getNode(value);
    var spec = options;
    var keys = Object.keys(spec);
    if (node && spec) {
      ["expanded", "actived", "checked"].forEach(function (name) {
        if (keys.includes(name)) {
          node["set".concat(upperFirst_1(name))](spec[name], {
            directly: true
          });
        }
      });
    }
  };
  var getItem = function getItem(value) {
    var node = treeStore.value.getNode(value);
    return node === null || node === void 0 ? void 0 : node.getModel();
  };
  var getItems = function getItems(value) {
    var nodes = treeStore.value.getNodes(value);
    return nodes.map(function (node) {
      return node.getModel();
    });
  };
  var appendTo = function appendTo(para, item) {
    var list = [];
    if (Array.isArray(item)) {
      list = item;
    } else {
      list = [item];
    }
    list.forEach(function (item2) {
      var val = (item2 === null || item2 === void 0 ? void 0 : item2.value) || "";
      var node = getNode(treeStore.value, val);
      if (node) {
        treeStore.value.appendNodes(para, node);
      } else {
        treeStore.value.appendNodes(para, item2);
      }
    });
  };
  var insertBefore = function insertBefore(value, item) {
    var val = (item === null || item === void 0 ? void 0 : item.value) || "";
    var node = getNode(treeStore.value, val);
    if (node) {
      treeStore.value.insertBefore(value, node);
    } else {
      treeStore.value.insertBefore(value, item);
    }
  };
  var insertAfter = function insertAfter(value, item) {
    var val = (item === null || item === void 0 ? void 0 : item.value) || "";
    var node = getNode(treeStore.value, val);
    if (node) {
      treeStore.value.insertAfter(value, node);
    } else {
      treeStore.value.insertAfter(value, item);
    }
  };
  var remove = function remove(value) {
    return treeStore.value.remove(value);
  };
  var getIndex = function getIndex(value) {
    return treeStore.value.getNodeIndex(value);
  };
  var getParent = function getParent(value) {
    var node = treeStore.value.getParent(value);
    return node === null || node === void 0 ? void 0 : node.getModel();
  };
  var getParents = function getParents(value) {
    var nodes = treeStore.value.getParents(value);
    return nodes.map(function (node) {
      return node.getModel();
    });
  };
  var getPath = function getPath(value) {
    var node = treeStore.value.getNode(value);
    var pathNodes = [];
    if (node) {
      pathNodes = node.getPath().map(function (node2) {
        return node2.getModel();
      });
    }
    return pathNodes;
  };
  expose({
    setItem: setItem,
    getItem: getItem,
    getItems: getItems,
    appendTo: appendTo,
    insertBefore: insertBefore,
    insertAfter: insertAfter,
    remove: remove,
    getIndex: getIndex,
    getParent: getParent,
    getParents: getParents,
    getPath: getPath
  });
}

export { useExposeFunc as default };
//# sourceMappingURL=useExposeFunc.mjs.map
