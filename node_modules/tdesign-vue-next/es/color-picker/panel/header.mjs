/**
 * tdesign v0.24.2
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../../_chunks/dep-3cecb2d2.mjs';
import { isVNode, defineComponent, ref, watch, createVNode } from 'vue';
import { CloseIcon } from 'tdesign-icons-vue-next';
import props from '../props.mjs';
import '../const.mjs';
import { RadioGroup, RadioButton } from '../../radio/index.mjs';
import { useBaseClassName } from '../hooks.mjs';
import { useGlobalIcon } from '../../hooks/useGlobalIcon.mjs';
import { COLOR_MODES } from '../../_common/js/color-picker/constants.mjs';
import '../../radio/radio.mjs';
import '../../_chunks/dep-cbaabd8b.mjs';
import '../../_chunks/dep-33031998.mjs';
import '../../_chunks/dep-fc49c640.mjs';
import '../../hooks/useConfig.mjs';
import '../../config-provider/useConfig.mjs';
import '../../_chunks/dep-a953bb61.mjs';
import '../../_chunks/dep-ad7eea53.mjs';
import '../../_chunks/dep-b43427a8.mjs';
import '../../_chunks/dep-cab779bd.mjs';
import '../../_chunks/dep-8c2e57f5.mjs';
import '../../_chunks/dep-c5944b2d.mjs';
import '../../_chunks/dep-f5995493.mjs';
import '../../_chunks/dep-21468dc9.mjs';
import '../../_chunks/dep-a39da6ce.mjs';
import '../../_chunks/dep-f5b976b2.mjs';
import '../../_chunks/dep-d904f554.mjs';
import '../../_chunks/dep-1984c62f.mjs';
import '../../_chunks/dep-cd44ef02.mjs';
import '../../_chunks/dep-63f67da3.mjs';
import '../../_chunks/dep-a537ee3e.mjs';
import '../../_chunks/dep-a6ebc045.mjs';
import '../../_chunks/dep-6f8d8885.mjs';
import '../../_chunks/dep-6ad4a916.mjs';
import '../../_chunks/dep-de110986.mjs';
import '../../_chunks/dep-2e0d3d32.mjs';
import '../../_chunks/dep-e478235e.mjs';
import '../../_chunks/dep-a8f3adf1.mjs';
import '../../_chunks/dep-c692ab23.mjs';
import '../../_chunks/dep-e23bac6d.mjs';
import '../../_chunks/dep-6d55d809.mjs';
import '../../_common/js/global-config/default-config.mjs';
import '../../_common/js/global-config/locale/zh_CN.mjs';
import '../../config-provider/type.mjs';
import '../../utils/helper.mjs';
import '../../_chunks/dep-d52a3086.mjs';
import '../../_chunks/dep-2517604a.mjs';
import '../../_chunks/dep-22081ace.mjs';
import '../../_chunks/dep-eede90e8.mjs';
import '../../_chunks/dep-7b441284.mjs';
import '../../_chunks/dep-13628992.mjs';
import '../../_chunks/dep-0510ab65.mjs';
import '../../_chunks/dep-2022ae69.mjs';
import '../../radio/props.mjs';
import '../../radio/constants.mjs';
import '../../form/hooks.mjs';
import '../../hooks/useVModel.mjs';
import '../../_chunks/dep-71ce186a.mjs';
import '../../hooks/tnode.mjs';
import '../../utils/render-tnode.mjs';
import '../../_chunks/dep-f8038a0a.mjs';
import '../../_chunks/dep-dcaa2bc6.mjs';
import '../../_chunks/dep-0cf2dc82.mjs';
import '../../radio/group.mjs';
import '../../_chunks/dep-bc2a46e2.mjs';
import '../../_chunks/dep-114a2907.mjs';
import '../../_chunks/dep-a64ddefd.mjs';
import '../../radio/radio-group-props.mjs';
import '../../radio/radio-button.mjs';
import '../../utils/withInstall.mjs';
import './style/css.mjs';
import '../../radio/type.mjs';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !isVNode(s);
}
var PanelHeader = defineComponent({
  name: "PanelHeader",
  props: _objectSpread(_objectSpread({}, props), {}, {
    mode: {
      type: String,
      "default": "color"
    },
    togglePopup: {
      type: Function
    },
    onModeChange: {
      type: Function,
      "default": function _default() {
        return function () {};
      }
    }
  }),
  setup: function setup(props2) {
    var baseClassName = useBaseClassName();
    var _useGlobalIcon = useGlobalIcon({
        CloseIcon: CloseIcon
      }),
      CloseIcon$1 = _useGlobalIcon.CloseIcon;
    var modeValue = ref(props2.mode);
    var handleModeChange = function handleModeChange(v) {
      return props2.onModeChange(v);
    };
    watch(function () {
      return props2.mode;
    }, function (v) {
      return modeValue.value = v;
    });
    return {
      baseClassName: baseClassName,
      CloseIcon: CloseIcon$1,
      modeValue: modeValue,
      handleModeChange: handleModeChange
    };
  },
  render: function render() {
    var _slot;
    var _this$colorModes,
      _this$colorModes2,
      _this = this;
    if (((_this$colorModes = this.colorModes) === null || _this$colorModes === void 0 ? void 0 : _this$colorModes.length) === 1) {
      return null;
    }
    var baseClassName = this.baseClassName,
      CloseIcon = this.CloseIcon;
    return createVNode("div", {
      "class": "".concat(baseClassName, "__head")
    }, [createVNode("div", {
      "class": "".concat(baseClassName, "__mode")
    }, [((_this$colorModes2 = this.colorModes) === null || _this$colorModes2 === void 0 ? void 0 : _this$colorModes2.length) === 1 ? COLOR_MODES[this.colorModes[0]] : createVNode(RadioGroup, {
      "variant": "default-filled",
      "size": "small",
      "modelValue": _this.modeValue,
      "onUpdate:modelValue": function onUpdateModelValue($event) {
        return _this.modeValue = $event;
      },
      "onChange": this.handleModeChange
    }, _isSlot(_slot = Object.keys(COLOR_MODES).map(function (key) {
      return createVNode(RadioButton, {
        "key": key,
        "value": key
      }, {
        "default": function _default() {
          return [COLOR_MODES[key]];
        }
      });
    })) ? _slot : {
      "default": function _default() {
        return [_slot];
      }
    })])]);
  }
});

export { PanelHeader as default };
//# sourceMappingURL=header.mjs.map
