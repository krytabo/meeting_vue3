/**
 * tdesign v0.24.2
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _toConsumableArray } from '../../_chunks/dep-cbaabd8b.mjs';
import { _ as _slicedToArray } from '../../_chunks/dep-fc49c640.mjs';
import { _ as _defineProperty } from '../../_chunks/dep-3cecb2d2.mjs';
import { defineComponent, toRefs, ref, watch, createVNode, Fragment, mergeProps } from 'vue';
import { useCommonClassName } from '../../hooks/useConfig.mjs';
import props from '../props.mjs';
import '../const.mjs';
import PanelHeader from './header.mjs';
import LinearGradient from './linear-gradient.mjs';
import SaturationPanel from './saturation.mjs';
import HueSlider from './hue.mjs';
import AlphaSlider from './alpha.mjs';
import FormatPanel from './format/index.mjs';
import SwatchesPanel from './swatches.mjs';
import '../utils/index.mjs';
import { useBaseClassName } from '../hooks.mjs';
import useVModel from '../../hooks/useVModel.mjs';
import useDefaultValue from '../../hooks/useDefaultValue.mjs';
import { useConfig } from '../../config-provider/useConfig.mjs';
import { Color, getColorObject } from '../../_common/js/color-picker/color.mjs';
import { DEFAULT_COLOR, TD_COLOR_USED_COLORS_MAX_SIZE, DEFAULT_LINEAR_GRADIENT, DEFAULT_SYSTEM_SWATCH_COLORS } from '../../_common/js/color-picker/constants.mjs';
import '../../_chunks/dep-33031998.mjs';
import '../../_chunks/dep-a953bb61.mjs';
import '../../_chunks/dep-ad7eea53.mjs';
import '../../_chunks/dep-b43427a8.mjs';
import '../../_chunks/dep-cab779bd.mjs';
import '../../_chunks/dep-8c2e57f5.mjs';
import '../../_chunks/dep-c5944b2d.mjs';
import '../../_chunks/dep-f5995493.mjs';
import '../../_chunks/dep-21468dc9.mjs';
import '../../_chunks/dep-a39da6ce.mjs';
import '../../_chunks/dep-f5b976b2.mjs';
import '../../_chunks/dep-d904f554.mjs';
import '../../_chunks/dep-1984c62f.mjs';
import '../../_chunks/dep-cd44ef02.mjs';
import '../../_chunks/dep-63f67da3.mjs';
import '../../_chunks/dep-a537ee3e.mjs';
import '../../_chunks/dep-a6ebc045.mjs';
import '../../_chunks/dep-6f8d8885.mjs';
import '../../_chunks/dep-6ad4a916.mjs';
import '../../_chunks/dep-de110986.mjs';
import '../../_chunks/dep-2e0d3d32.mjs';
import '../../_chunks/dep-e478235e.mjs';
import '../../_chunks/dep-a8f3adf1.mjs';
import '../../_chunks/dep-c692ab23.mjs';
import '../../_chunks/dep-e23bac6d.mjs';
import '../../_chunks/dep-6d55d809.mjs';
import '../../_common/js/global-config/default-config.mjs';
import '../../_common/js/global-config/locale/zh_CN.mjs';
import '../../config-provider/type.mjs';
import 'tdesign-icons-vue-next';
import '../../radio/index.mjs';
import '../../radio/radio.mjs';
import '../../utils/helper.mjs';
import '../../_chunks/dep-d52a3086.mjs';
import '../../_chunks/dep-2517604a.mjs';
import '../../_chunks/dep-22081ace.mjs';
import '../../_chunks/dep-eede90e8.mjs';
import '../../_chunks/dep-7b441284.mjs';
import '../../_chunks/dep-13628992.mjs';
import '../../_chunks/dep-0510ab65.mjs';
import '../../_chunks/dep-2022ae69.mjs';
import '../../radio/props.mjs';
import '../../radio/constants.mjs';
import '../../form/hooks.mjs';
import '../../hooks/tnode.mjs';
import '../../_chunks/dep-71ce186a.mjs';
import '../../utils/render-tnode.mjs';
import '../../_chunks/dep-f8038a0a.mjs';
import '../../_chunks/dep-dcaa2bc6.mjs';
import '../../_chunks/dep-0cf2dc82.mjs';
import '../../radio/group.mjs';
import '../../_chunks/dep-bc2a46e2.mjs';
import '../../_chunks/dep-114a2907.mjs';
import '../../_chunks/dep-a64ddefd.mjs';
import '../../radio/radio-group-props.mjs';
import '../../radio/radio-button.mjs';
import '../../utils/withInstall.mjs';
import './style/css.mjs';
import '../../radio/type.mjs';
import '../../hooks/useGlobalIcon.mjs';
import '../../_chunks/dep-4a15ec9b.mjs';
import '../../_chunks/dep-a8762670.mjs';
import '../../_chunks/dep-5a93c66b.mjs';
import '../../input-number/index.mjs';
import '../../input-number/input-number.mjs';
import '../../button/index.mjs';
import '../../button/button.mjs';
import '../../loading/index.mjs';
import '../../loading/directive.mjs';
import '../../loading/plugin.mjs';
import '../../loading/loading.mjs';
import '../../loading/icon/gradient.mjs';
import '../../_common/js/loading/circle-adapter.mjs';
import '../../_common/js/utils/set-style.mjs';
import '../../_common/js/utils/helper.mjs';
import '../../utils/dom.mjs';
import '../../utils/easing.mjs';
import '../../utils/transfer-dom.mjs';
import '../../loading/props.mjs';
import '../../loading/type.mjs';
import '../../button/props.mjs';
import '../../hooks/useRipple.mjs';
import '../../hooks/useKeepAnimation.mjs';
import '../../utils/set-style.mjs';
import '../../button/type.mjs';
import '../../input/index.mjs';
import '../../input/input.mjs';
import '../../input/props.mjs';
import '../../input/useInput.mjs';
import '../../form/const.mjs';
import '../../hooks/index.mjs';
import '../../hooks/icon.mjs';
import '../../hooks/slot.mjs';
import '../../hooks/useCommonClassName.mjs';
import '../../hooks/useDestroyOnClose.mjs';
import '../../hooks/useVirtualScroll.mjs';
import '../../input/useInputEventHandler.mjs';
import '../../input/useInputWidth.mjs';
import '../../input/input-group.mjs';
import '../../input/type.mjs';
import '../../input-number/props.mjs';
import '../../input-number/useInputNumber.mjs';
import '../../_common/js/input-number/number.mjs';
import '../../_common/js/input-number/large-number.mjs';
import '../../_common/js/log/log.mjs';
import '../../_common/js/log/index.mjs';
import '../../input-number/type.mjs';
import './base-props.mjs';
import '../../_common/js/color-picker/draggable.mjs';
import '../../_chunks/dep-477a26d0.mjs';
import './slider.mjs';
import '../../select/index.mjs';
import '../../select/select.mjs';
import '../../_chunks/dep-e3e7f0af.mjs';
import '../../_chunks/dep-86de30fa.mjs';
import '../../_chunks/dep-0fdea1fe.mjs';
import '../../_chunks/dep-a7f196e9.mjs';
import '../../_chunks/dep-bd52eb06.mjs';
import '../../_chunks/dep-41ea6045.mjs';
import '../../_chunks/dep-303f016f.mjs';
import '../../_chunks/dep-9488bcf1.mjs';
import '../../_chunks/dep-09ac8451.mjs';
import '../../common-components/fake-arrow.mjs';
import '../../select-input/index.mjs';
import '../../select-input/select-input.mjs';
import '../../popup/index.mjs';
import '../../popup/popup.mjs';
import '@popperjs/core';
import '../../popup/props.mjs';
import '../../popup/container.mjs';
import '../../popup/type.mjs';
import '../../select-input/props.mjs';
import '../../select-input/useSingle.mjs';
import '../../select-input/useMultiple.mjs';
import '../../tag-input/index.mjs';
import '../../tag-input/tag-input.mjs';
import '../../tag-input/props.mjs';
import '../../tag-input/hooks/useTagScroll.mjs';
import '../../tag-input/useTagList.mjs';
import '../../tag/index.mjs';
import '../../tag/tag.mjs';
import '../../tag/props.mjs';
import '../../tag/check-tag.mjs';
import '../../tag/check-tag-props.mjs';
import '../../tag/type.mjs';
import '../../tag-input/hooks/useHover.mjs';
import '../../tag-input/hooks/useDragSorter.mjs';
import '../../tag-input/type.mjs';
import '../../select-input/useOverlayInnerStyle.mjs';
import '../../select-input/type.mjs';
import '../../select/select-panel.mjs';
import '../../_chunks/dep-2289c323.mjs';
import '../../select/option.mjs';
import '../../select/option-props.mjs';
import '../../checkbox/index.mjs';
import '../../checkbox/checkbox.mjs';
import '../../checkbox/props.mjs';
import '../../checkbox/constants.mjs';
import '../../checkbox/group.mjs';
import '../../checkbox/checkbox-group-props.mjs';
import '../../checkbox/type.mjs';
import '../../select/helper.mjs';
import '../../select/optionGroup.mjs';
import '../../select/option-group-props.mjs';
import '../../select/props.mjs';
import '../../select/hooks/usePanelVirtualScroll.mjs';
import '../../select/hooks/useSelectOptions.mjs';
import '../../select/type.mjs';
import './format/inputs.mjs';
import '../../_chunks/dep-8f297eb6.mjs';
import './format/config.mjs';
import '../../_common/js/color-picker/index.mjs';
import '../../_common/js/color-picker/cmyk.mjs';
import '../../_chunks/dep-137b5c7d.mjs';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var ColorPanel = defineComponent({
  name: "ColorPanel",
  props: _objectSpread(_objectSpread({}, props), {}, {
    togglePopup: {
      type: Function
    }
  }),
  setup: function setup(props2) {
    var baseClassName = useBaseClassName();
    var _useCommonClassName = useCommonClassName(),
      STATUS = _useCommonClassName.STATUS;
    var _useConfig = useConfig("colorPicker"),
      t = _useConfig.t,
      globalConfig = _useConfig.globalConfig;
    var statusClassNames = STATUS.value;
    var _toRefs = toRefs(props2),
      inputValue = _toRefs.value,
      modelValue = _toRefs.modelValue,
      recentColors = _toRefs.recentColors;
    var _useVModel = useVModel(inputValue, modelValue, props2.defaultValue, props2.onChange),
      _useVModel2 = _slicedToArray(_useVModel, 2),
      innerValue = _useVModel2[0],
      setInnerValue = _useVModel2[1];
    var color = ref(new Color(innerValue.value || DEFAULT_COLOR));
    var updateColor = function updateColor() {
      return color.value.update(innerValue.value || DEFAULT_COLOR);
    };
    var mode = ref(color.value.isGradient ? "linear-gradient" : "monochrome");
    var formatModel = ref(color.value.isGradient ? "CSS" : "RGB");
    var _useDefaultValue = useDefaultValue(recentColors, props2.defaultRecentColors, props2.onRecentColorsChange, "recentColors"),
      _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
      recentlyUsedColors = _useDefaultValue2[0],
      setRecentlyUsedColors = _useDefaultValue2[1];
    if (props2.colorModes.length === 1) {
      var m = props2.colorModes[0];
      mode.value = m;
    }
    var formatValue = function formatValue() {
      if (mode.value === "linear-gradient") {
        return color.value.linearGradient;
      }
      return color.value.getFormatsColorMap()[props2.format] || color.value.css;
    };
    var addRecentlyUsedColor = function addRecentlyUsedColor() {
      if (recentlyUsedColors.value === null || recentlyUsedColors.value === false) {
        return;
      }
      var colors = recentlyUsedColors.value || [];
      var currentColor = color.value.isGradient ? color.value.linearGradient : color.value.rgba;
      var index = colors.indexOf(currentColor);
      if (index > -1) {
        colors.splice(index, 1);
      }
      colors.unshift(currentColor);
      if (colors.length > TD_COLOR_USED_COLORS_MAX_SIZE) {
        colors.length = TD_COLOR_USED_COLORS_MAX_SIZE;
      }
      handleRecentlyUsedColorsChange(colors);
    };
    var handleRecentlyUsedColorsChange = function handleRecentlyUsedColorsChange(colors) {
      recentlyUsedColors.value = colors;
      setRecentlyUsedColors(colors);
    };
    var emitColorChange = function emitColorChange(trigger) {
      setInnerValue(formatValue(), {
        color: getColorObject(color.value),
        trigger: trigger || "palette-saturation-brightness"
      });
    };
    watch(function () {
      return [props2.defaultValue, props2.enableAlpha];
    }, updateColor);
    watch(function () {
      return innerValue.value;
    }, function (newColor) {
      if (newColor !== formatValue()) {
        updateColor();
        mode.value = color.value.isGradient ? "linear-gradient" : "monochrome";
      }
    });
    var handleModeChange = function handleModeChange(value) {
      mode.value = value;
      if (value === "linear-gradient") {
        color.value.update(color.value.gradientColors.length > 0 ? color.value.linearGradient : DEFAULT_LINEAR_GRADIENT);
        return;
      }
      color.value.update(color.value.rgba);
    };
    var handleFormatModeChange = function handleFormatModeChange(format) {
      return formatModel.value = format;
    };
    var handleSatAndValueChange = function handleSatAndValueChange(_ref) {
      var saturation = _ref.saturation,
        value = _ref.value;
      var _color$value = color.value,
        sat = _color$value.saturation,
        val = _color$value.value;
      var changeTrigger = "palette-saturation-brightness";
      if (value !== val && saturation !== sat) {
        color.value.saturation = saturation;
        color.value.value = value;
        changeTrigger = "palette-saturation-brightness";
      } else if (saturation !== sat) {
        color.value.saturation = saturation;
        changeTrigger = "palette-saturation";
      } else if (value !== val) {
        color.value.value = value;
        changeTrigger = "palette-brightness";
      } else {
        return;
      }
      emitColorChange(changeTrigger);
    };
    var handleHueChange = function handleHueChange(hue) {
      var _props2$onPaletteBarC;
      color.value.hue = hue;
      emitColorChange("palette-hue-bar");
      (_props2$onPaletteBarC = props2.onPaletteBarChange) === null || _props2$onPaletteBarC === void 0 ? void 0 : _props2$onPaletteBarC.call(props2, {
        color: getColorObject(color.value)
      });
    };
    var handleAlphaChange = function handleAlphaChange(alpha) {
      color.value.alpha = alpha;
      emitColorChange("palette-alpha-bar");
    };
    var handleInputChange = function handleInputChange(input, alpha) {
      color.value.update(input);
      color.value.alpha = alpha;
      emitColorChange("input");
    };
    var handleGradientChange = function handleGradientChange(_ref2) {
      var key = _ref2.key,
        payload = _ref2.payload;
      var trigger = "palette-saturation-brightness";
      switch (key) {
        case "degree":
          color.value.gradientDegree = payload;
          trigger = "input";
          break;
        case "selectedId":
          color.value.gradientSelectedId = payload;
          break;
        case "colors":
          color.value.gradientColors = payload;
          break;
      }
      emitColorChange(trigger);
    };
    var handleSetColor = function handleSetColor(type, value) {
      var isGradientValue = Color.isGradientColor(value);
      if (isGradientValue) {
        if (props2.colorModes.includes("linear-gradient")) {
          mode.value = "linear-gradient";
          color.value.update(value);
          color.value.updateCurrentGradientColor();
        } else {
          console.warn("\u8BE5\u6A21\u5F0F\u4E0D\u652F\u6301\u6E10\u53D8\u8272");
        }
      } else if (mode.value === "linear-gradient") {
        color.value.updateStates(value);
        color.value.updateCurrentGradientColor();
      } else {
        color.value.update(value);
      }
      emitColorChange();
    };
    return {
      baseClassName: baseClassName,
      statusClassNames: statusClassNames,
      t: t,
      globalConfig: globalConfig,
      color: color,
      mode: mode,
      formatModel: formatModel,
      recentlyUsedColors: recentlyUsedColors,
      addRecentlyUsedColor: addRecentlyUsedColor,
      handleModeChange: handleModeChange,
      handleSatAndValueChange: handleSatAndValueChange,
      handleHueChange: handleHueChange,
      handleAlphaChange: handleAlphaChange,
      handleGradientChange: handleGradientChange,
      handleSetColor: handleSetColor,
      handleFormatModeChange: handleFormatModeChange,
      handleInputChange: handleInputChange,
      handleRecentlyUsedColorsChange: handleRecentlyUsedColorsChange
    };
  },
  render: function render() {
    var _systemColors,
      _this = this;
    var baseClassName = this.baseClassName,
      statusClassNames = this.statusClassNames,
      t = this.t,
      globalConfig = this.globalConfig,
      recentColors = this.recentColors,
      recentlyUsedColors = this.recentlyUsedColors,
      swatchColors = this.swatchColors;
    var baseProps = {
      color: this.color,
      disabled: this.disabled
    };
    var showUsedColors = recentColors !== null && recentColors !== false;
    var systemColors = swatchColors;
    if (systemColors === void 0) {
      systemColors = _toConsumableArray(DEFAULT_SYSTEM_SWATCH_COLORS);
    }
    var showSystemColors = ((_systemColors = systemColors) === null || _systemColors === void 0 ? void 0 : _systemColors.length) > 0;
    var renderSwatches = function renderSwatches() {
      if (!showSystemColors && !showUsedColors) {
        return null;
      }
      return createVNode(Fragment, null, [createVNode("div", {
        "class": "".concat(baseClassName, "__swatches-wrap")
      }, [showUsedColors ? createVNode(SwatchesPanel, mergeProps(baseProps, {
        "title": t(globalConfig.recentColorTitle),
        "editable": true,
        "colors": _this.recentlyUsedColors,
        "handleAddColor": _this.addRecentlyUsedColor,
        "onSetColor": function onSetColor(color) {
          return _this.handleSetColor("used", color);
        },
        "onChange": _this.handleRecentlyUsedColorsChange
      }), null) : null, showSystemColors ? createVNode(SwatchesPanel, mergeProps(baseProps, {
        "title": t(globalConfig.swatchColorTitle),
        "colors": systemColors,
        "onSetColor": function onSetColor(color) {
          return _this.handleSetColor("system", color);
        }
      }), null) : null])]);
    };
    var isGradient = this.mode === "linear-gradient";
    return createVNode("div", {
      "class": ["".concat(baseClassName, "__panel"), this.disabled ? statusClassNames.disabled : false]
    }, [createVNode(PanelHeader, mergeProps(this.$props, {
      "mode": this.mode,
      "onModeChange": this.handleModeChange
    }), null), createVNode("div", {
      "class": ["".concat(baseClassName, "__body")]
    }, [isGradient ? createVNode(LinearGradient, mergeProps(baseProps, {
      "onChange": this.handleGradientChange
    }), null) : null, createVNode(SaturationPanel, mergeProps(baseProps, {
      "onChange": this.handleSatAndValueChange
    }), null), createVNode("div", {
      "class": ["".concat(baseClassName, "__sliders-wrapper")]
    }, [createVNode("div", {
      "class": ["".concat(baseClassName, "__sliders")]
    }, [createVNode(HueSlider, mergeProps(baseProps, {
      "onChange": this.handleHueChange
    }), null), this.enableAlpha ? createVNode(AlphaSlider, mergeProps(baseProps, {
      "onChange": this.handleAlphaChange
    }), null) : null]), createVNode("div", {
      "class": ["".concat(baseClassName, "__sliders-preview"), "".concat(baseClassName, "--bg-alpha")]
    }, [createVNode("span", {
      "class": "".concat(baseClassName, "__sliders-preview-inner"),
      "style": {
        background: isGradient ? this.color.linearGradient : this.color.rgba
      }
    }, null)])]), createVNode(FormatPanel, mergeProps(this.$props, {
      "color": this.color,
      "format": this.formatModel,
      "onModeChange": this.handleFormatModeChange,
      "onInputChange": this.handleInputChange
    }), null), renderSwatches()])]);
  }
});

export { ColorPanel as default };
//# sourceMappingURL=index.mjs.map
