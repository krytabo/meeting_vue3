{"version":3,"file":"useDragSort.js","sources":["../../../src/table/hooks/useDragSort.ts"],"sourcesContent":["// 表格 行拖拽 + 列拖拽功能\nimport { SetupContext, computed, toRefs, ref, watch, h } from 'vue';\nimport Sortable, { SortableEvent, SortableOptions, MoveEvent } from 'sortablejs';\nimport get from 'lodash/get';\nimport isFunction from 'lodash/isFunction';\nimport { TableRowData, TdPrimaryTableProps, DragSortContext } from '../type';\nimport useClassName from './useClassName';\nimport log from '../../_common/js/log';\nimport { hasClass } from '../../utils/dom';\nimport swapDragArrayElement from '../../_common/js/utils/swapDragArrayElement';\nimport { BaseTableColumns } from '../interface';\nimport { getColumnDataByKey, getColumnIndexByKey } from '../utils';\n\nexport default function useDragSort(props: TdPrimaryTableProps, context: SetupContext) {\n  const { sortOnRowDraggable, dragSort, data, rowKey } = toRefs(props);\n  const { tableDraggableClasses, tableBaseClass, tableFullRowClasses } = useClassName();\n  const primaryTableRef = ref(null);\n  const columns = ref<BaseTableColumns>(props.columns || []);\n  // @ts-ignore 判断是否有拖拽列\n  const dragCol = computed(() => columns.value.find((item) => item.colKey === 'drag'));\n  // 行拖拽判断条件\n  const isRowDraggable = computed(() => sortOnRowDraggable.value || dragSort.value === 'row');\n  // 行拖拽判断条件-手柄列\n  const isRowHandlerDraggable = computed(\n    () => ['row-handler', 'row-handler-col'].includes(dragSort.value) && !!dragCol.value,\n  );\n  // 列拖拽判断条件\n  const isColDraggable = computed(() => ['col', 'row-handler-col'].includes(dragSort.value));\n  // 行拖拽排序，存储上一次的变化结果\n  const lastRowList = ref([]);\n  // 列拖拽排序，存储上一次的变化结果\n  const lastColList = ref([]);\n\n  if (props.sortOnRowDraggable) {\n    log.error('Table', \"`sortOnRowDraggable` is going to be deprecated, use dragSort='row' instead.\");\n  }\n\n  watch(\n    [data],\n    ([data]) => {\n      lastRowList.value = data?.map((item) => get(item, rowKey.value)) || [];\n    },\n    { immediate: true },\n  );\n\n  watch(\n    columns,\n    (columns) => {\n      lastColList.value = columns ? columns.map((t) => t.colKey) : [];\n    },\n    { immediate: true },\n  );\n\n  // 行拖拽排序\n  const registerRowDragEvent = (element: HTMLDivElement): void => {\n    if (!isRowHandlerDraggable.value && !isRowDraggable.value) return;\n    const dragContainer = element?.querySelector('tbody');\n    if (!dragContainer) {\n      console.error('tbody does not exist.');\n      return null;\n    }\n    // 拖拽实例\n    let dragInstanceTmp: Sortable = null;\n    const baseOptions: SortableOptions = {\n      animation: 150,\n      ...props.dragSortOptions,\n      ghostClass: tableDraggableClasses.ghost,\n      chosenClass: tableDraggableClasses.chosen,\n      dragClass: tableDraggableClasses.dragging,\n      filter: `.${tableFullRowClasses.base}`, // 过滤首行尾行固定\n      onMove: (evt: MoveEvent) => !hasClass(evt.related, tableFullRowClasses.base),\n      onEnd(evt: SortableEvent) {\n        // 处理受控：拖拽列表恢复原始排序\n        dragInstanceTmp?.sort(lastRowList.value);\n        let { oldIndex: currentIndex, newIndex: targetIndex } = evt;\n        if ((isFunction(props.firstFullRow) && props.firstFullRow(h)) || context.slots.firstFullRow) {\n          currentIndex -= 1;\n          targetIndex -= 1;\n        }\n        const params: DragSortContext<TableRowData> = {\n          data: data.value,\n          currentIndex,\n          current: data.value[currentIndex],\n          targetIndex,\n          target: data.value[targetIndex],\n          newData: swapDragArrayElement([...props.data], currentIndex, targetIndex),\n          e: evt,\n          sort: 'row',\n        };\n        // currentData is going to be deprecated\n        params.currentData = params.newData;\n        props.onDragSort?.(params);\n      },\n    };\n\n    if (!dragContainer) return;\n    if (isRowDraggable.value) {\n      dragInstanceTmp = new Sortable(dragContainer, { ...baseOptions });\n    } else {\n      dragInstanceTmp = new Sortable(dragContainer, {\n        ...baseOptions,\n        handle: `.${tableDraggableClasses.handle}`,\n      });\n    }\n    lastRowList.value = dragInstanceTmp.toArray();\n  };\n\n  const registerOneLevelColDragEvent = (container: HTMLElement, recover: boolean) => {\n    // 拖拽实例\n    let dragInstanceTmp: Sortable = null;\n    const options: SortableOptions = {\n      animation: 150,\n      ...props.dragSortOptions,\n      dataIdAttr: 'data-colkey',\n      direction: 'vertical',\n      ghostClass: tableDraggableClasses.ghost,\n      chosenClass: tableDraggableClasses.chosen,\n      dragClass: tableDraggableClasses.dragging,\n      handle: `.${tableBaseClass.thCellInner}`,\n      onEnd: (evt: SortableEvent) => {\n        if (recover) {\n          // 处理受控：拖拽列表恢复原始排序，等待外部数据 data 变化，更新最终顺序\n          dragInstanceTmp?.sort([...lastColList.value]);\n        }\n        const { oldIndex, newIndex, target: targetElement } = evt;\n        let currentIndex = recover ? oldIndex : newIndex;\n        let targetIndex = recover ? newIndex : oldIndex;\n        const oldElement = targetElement.children[currentIndex] as HTMLElement;\n        const newElement = targetElement.children[targetIndex] as HTMLElement;\n        const current = getColumnDataByKey(columns.value, oldElement.dataset.colkey);\n        const target = getColumnDataByKey(columns.value, newElement.dataset.colkey);\n        if (!current || !current.colKey) {\n          log.error('Table', `colKey is missing in ${JSON.stringify(current)}`);\n        }\n        if (!target || !target.colKey) {\n          log.error('Table', `colKey is missing in ${JSON.stringify(target)}`);\n        }\n        // 寻找外部数据 props.columns 中的真正下标\n        currentIndex = getColumnIndexByKey(props.columns, current.colKey);\n        targetIndex = getColumnIndexByKey(props.columns, target.colKey);\n        const params: DragSortContext<TableRowData> = {\n          data: columns.value,\n          currentIndex,\n          current,\n          targetIndex,\n          target,\n          newData: swapDragArrayElement([...props.columns], currentIndex, targetIndex),\n          e: evt,\n          sort: 'col',\n        };\n        // currentData is going to be deprecated\n        params.currentData = params.newData;\n        props.onDragSort?.(params);\n      },\n    };\n    if (!container) return;\n    dragInstanceTmp = new Sortable(container, options);\n    return dragInstanceTmp;\n  };\n\n  // 列拖拽排序：涉及到多级表头、自定义显示列 等综合场景\n  const registerColDragEvent = (tableElement: HTMLElement) => {\n    if (!isColDraggable.value || !tableElement) return;\n    const trList = tableElement.querySelectorAll('thead > tr');\n    if (trList.length <= 1) {\n      const [container] = trList;\n      const dragInstanceTmp = registerOneLevelColDragEvent(container as HTMLElement, true);\n      lastColList.value = dragInstanceTmp?.toArray();\n    } else {\n      // 多级表头只抛出事件，不处理其他未知逻辑（如多层表头之间具体如何交换）\n      trList.forEach((container) => {\n        registerOneLevelColDragEvent(container as HTMLElement, false);\n      });\n    }\n  };\n\n  function setDragSortPrimaryTableRef(primaryTableElement: any) {\n    primaryTableRef.value = primaryTableElement;\n  }\n\n  function setDragSortColumns(val: BaseTableColumns) {\n    columns.value = val;\n  }\n\n  // 注册拖拽事件\n  watch([primaryTableRef], ([val]: [any]) => {\n    if (!val || !val.$el) return;\n    registerRowDragEvent(val.$el);\n    registerColDragEvent(val.$el);\n    /** 待表头节点准备完成后 */\n    const timer = setTimeout(() => {\n      if (val.$refs.affixHeaderRef) {\n        registerColDragEvent(val.$refs.affixHeaderRef);\n      }\n      clearTimeout(timer);\n    });\n  });\n\n  return {\n    isRowDraggable,\n    isRowHandlerDraggable,\n    isColDraggable,\n    setDragSortPrimaryTableRef,\n    setDragSortColumns,\n  };\n}\n"],"names":["useDragSort","props","context","toRefs","sortOnRowDraggable","dragSort","data","rowKey","useClassName","tableDraggableClasses","tableBaseClass","tableFullRowClasses","primaryTableRef","ref","columns","dragCol","computed","value","find","item","colKey","isRowDraggable","isRowHandlerDraggable","includes","isColDraggable","lastRowList","lastColList","log","error","watch","_slicedToArray","map","get","immediate","t","registerRowDragEvent","element","dragContainer","querySelector","console","dragInstanceTmp","baseOptions","animation","dragSortOptions","ghostClass","ghost","chosenClass","chosen","dragClass","dragging","filter","base","onMove","evt","hasClass","related","onEnd","sort","currentIndex","oldIndex","targetIndex","newIndex","isFunction","firstFullRow","h","slots","params","current","target","newData","swapDragArrayElement","e","currentData","onDragSort","Sortable","handle","toArray","registerOneLevelColDragEvent","container","recover","options","dataIdAttr","direction","thCellInner","targetElement","oldElement","children","newElement","getColumnDataByKey","dataset","colkey","JSON","stringify","getColumnIndexByKey","registerColDragEvent","tableElement","trList","querySelectorAll","length","forEach","setDragSortPrimaryTableRef","primaryTableElement","setDragSortColumns","val","$el","timer","setTimeout","$refs","affixHeaderRef","clearTimeout"],"mappings":"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"}